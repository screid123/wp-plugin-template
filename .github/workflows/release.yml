name: Release
run-name: Release ${{ github.event.release.tag_name }}
on:
  release:
    types: [released]
jobs:
  release:
    name: 'Publish Release assets'
    runs-on: ubuntu-latest
    env:
      PLUGIN_SLUG: "wp-plugin-template" # This should match the "slug" value in Gruntfile.js
      DOWNLOAD_URI: "https://cdn.ccstatic.com/wordpress-plugins/wp-plugin-template/" # This should match the "download_uri" value in Gruntfile.js; trailing slash!
      DEST_DIR: "wordpress-plugins/wp-plugin-template" # Relative path inside S3 bucket; no leading or trailing slash!
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v3
      - name: 'Set up Node'
        uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json' # Uses `engines.node` value!
          cache: 'npm'
      - name: 'Install Composer dependencies'
        uses: php-actions/composer@v6
        with:
          dev: no
          args: --optimize-autoloader --classmap-authoritative
          version: "2.x"
          php_version: "7.4" # This should match your "requires_php" value from the Gruntfile.js
      - name: 'Install NPM dependencies'
        run: npm ci --ignore-scripts --no-optional
      - name: 'Build the plugin'
        run: npm run release
      - name: 'Run tests'
        run: npm test
      - name: 'Upload the plugin as a Release Asset'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ env.PLUGIN_SLUG }}-${{ github.event.release.tag_name }}.zip
          asset_name: ${{ env.PLUGIN_SLUG }}-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
      - name: 'Remove “manifest.json” for pre-releases before uploading to S3'
        if: contains(github.event.release.tag_name, '-rc.')
        working-directory: dist
        run: rm -f manifest.json
      - name: 'Deploy artifacts to S3'
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: dist
          DEST_DIR: ${{ env.DEST_DIR }}
      - name: 'Purge ”manifest.json” cache'
        if: success()
        run: curl -X PURGE "${DOWNLOAD_URI}manifest.json"