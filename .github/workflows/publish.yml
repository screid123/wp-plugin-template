name: Publish
run-name: Publish ${{ github.event.release.tag_name }}
on:
  release:
    types: [published]
jobs:
  release:
    name: 'Publish Release assets'
    runs-on: ubuntu-latest
    env:
      PLUGIN_SLUG: "wp-plugin-template" # This should match the "slug" value in Gruntfile.js
      DOWNLOAD_URI: "https://cdn.ccstatic.com/wordpress-plugins/wp-plugin-template/" # This should match the "download_uri" value in Gruntfile.js; trailing slash!
      DEST_DIR: "wordpress-plugins/wp-plugin-template" # Relative path inside S3 bucket; no leading or trailing slash!
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}
      - name: 'Set up Node'
        uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json' # Uses `engines.node` value!
          cache: 'npm'
      - name: 'Install NPM dependencies'
        run: npm ci --ignore-scripts --no-optional
      - name: 'Download the release plugin ZIP'
        uses: i3h/download-release-asset@v1
        with:
          owner: ${{ env.GITHUB_REPOSITORY_OWNER }}
          repo: ${{ env.GITHUB_REPOSITORY#*/ }}
          tag: ${{ github.event.release.tag_name }}
          file: wp-plugin-template-${{ github.event.release.tag_name }}.zip
          path: dist
          token: ${{ secrets.GHA_RELEASE_TOKEN }}
      - name: 'Download the release manifest'
        if: !contains(github.event.release.tag_name, '-rc.')
        uses: i3h/download-release-asset@v1
        with:
          owner: ${{ env.GITHUB_REPOSITORY_OWNER }}
          repo: ${{ env.GITHUB_REPOSITORY#*/ }}
          tag: ${{ github.event.release.tag_name }}
          file: manifest.json
          path: dist
          token: ${{ secrets.GHA_RELEASE_TOKEN }}
      - name: 'Deploy artifacts to S3'
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: dist
          DEST_DIR: ${{ env.DEST_DIR }}
      - name: 'Purge ”manifest.json” cache'
        if: success()
        run: curl -X PURGE "${DOWNLOAD_URI}manifest.json"